####################Malware mispredictions (Section 5.4.4)######################

import json
import os
import glob
for model in ["bert","albert","xlm"]:
    folder_path = "output_{}".format(model)

    file_list = glob.glob(os.path.join(folder_path, "*-strict-preserve.json"))
    file_list_CyBERT = glob.glob(os.path.join(folder_path, "*-strict-preserve-CyBERT.json"))
    file_list_Word2Vec = glob.glob(os.path.join(folder_path, "*-strict-preserve-Word2Vec.json"))

    file_list += file_list_CyBERT + file_list_Word2Vec

    all_temp = []

    for file_path in file_list:
        total_queries, total_perturbed_score, success = 0, 0, 0
        file_name = os.path.basename(file_path)
        print("File path:", file_path)
        temp = set()
        with open(os.path.join(folder_path,file_name), 'r',encoding='utf-8') as fp:
            json_data = json.load(fp)
            all_indices = json_data["attacked_examples"]
            for i in range(len(all_indices)):
                try:
                    if all_indices[i]["status"] == "Successful":

                        ############Statistics in Table 5###############
                        total_queries += all_indices[i]["num_queries"]
                        total_perturbed_score += (all_indices[i]["perturbed_score"] - all_indices[i]["original_score"])
                        success += 1
                        #########################################

                        for count in range(len(all_indices[i]["ground_truth"])):
                            if model != "albert":
                                if all_indices[i]["ground_truth"][count] not in [0,7] and all_indices[i]["perturbed_pred"][count] in [0,7]:
                                    temp.add(i)
                            else:
                                if all_indices[i]["ground_truth"][count] not in [0,1] and all_indices[i]["perturbed_pred"][count] in [0,1]:
                                    temp.add(i)
                except:
                    pass                        ###skipped

        print("M1: ",total_queries / success)
        print("M2: ",total_perturbed_score / success)

        all_temp.append(temp)
        print(len(temp))

    print(all_temp)



#######################Draw Fig.7#######################

# import matplotlib.pyplot as plt
# import seaborn as sns
# import numpy as np

# labels = ['BAE', 'DeepWordBug', 'Morpheus', 'Ours', 'TextFooler', 'BAE (CyBERT)', 'TextFooler (Word2Vec)']
# xlabel = ["(a) BERT","(b) ALBERT","(c) XLM-RoBERTa","(d) BERT","(e) ALBERT","(f) XLM-RoBERTa"]
# quantities = [[15, 23, 3, 23, 13, 23, 15],
#               [14, 20, 0, 16, 12, 18, 14],
#               [4, 7, 0, 6, 4, 8, 3],
#               [62,169,6,176,155,60,169],
#               [35,104,4,101,83,57,128],
#               [23,101,0,36,25,22,41]]
#
# explode = [0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02]

# fig, axs = plt.subplots(2, 3)

# for i, ax in enumerate(axs.flat):

#     total = sum(quantities[i])
#     sizes = [qty / total * 100 for qty in quantities[i]]
#
#     colors = sns.color_palette("deep")

#     wedges, texts, autotexts  = ax.pie(sizes, labels=None,colors=colors,autopct='%1.1f%%', explode=explode,startangle= 30,labeldistance=2)
#
#     for text in autotexts:
#         if text.get_text() == "0.0%":
#             text.set_text("")

#     # ax.legend(wedges, labels, loc='upper center', bbox_to_anchor=(0.5, 1.1), fontsize='medium')
#
#     ax.set_xlabel(xlabel[i],fontweight='bold')
#
#
# legend = plt.figlegend(labels, loc='upper center', bbox_to_anchor=(0.5, 1.0), ncol=4,fontsize='xlm-large',prop={'size': 9})

# plt.tight_layout(pad = 2)
# plt.savefig('mispredictions.png', dpi=600)

# plt.show()