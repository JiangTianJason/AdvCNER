##########################Intelligent assessment in Table 6 (Section 5.4.1)############################
##  Each time we copy one line in input.txt to the dialog box, and record the feedback in score.csv (for example).######

## Input Prompt:  "Give you the following list: ['Table 5 describes the latest variant seen in AutoFocus .', 'variant 10 describes the latest update seen in AutoFocus .', 'Tcable 5 describes the latset variant seen in AutoFocu .', 'Tables 5 describing the later variant seen in AutoFocus .', 'Table 5 description the ultima mutants identified in AutoFocus .', 'uri 5 offers the latest vulnerabilities seen in AutoFocus .', 'Table 5 describes the latest malware seen in AutoFocus .', 'Table 5 recounts the modish variant seen in AutoFocus .']. \
# The first sentence in the list is the original intelligence text, the other sentences are alternative sentences. \
# Please sort all alternative sentences according to the facts that best fit the original sentence statement, \
# and simply return the result of the index of the alternative sentence in the list, without the rest of the responses, \
# and without returning the index at which the original sentence is located. \
# Specify that the index of the original sentence is 0, and the indexes of the other sentences are 1, 2, 3, 4, 5, 6, and 7, in that order."



import json
import os
import glob

for model in ["bert","albert","xlm"]:
    folder_path = "../output_{}".format(model)

    file_list = glob.glob(os.path.join(folder_path, "*-strict-preserve.json"))
    file_list_CyBERT = glob.glob(os.path.join(folder_path, "*-strict-preserve-CyBERT.json"))
    file_list_Word2Vec = glob.glob(os.path.join(folder_path, "*-strict-preserve-Word2Vec-similar_by_word.json"))
    file_list_nvjr = glob.glob(os.path.join(folder_path, "*-strict-preserve-MustInWord2vec-WIR-random-threshold0.2.json"))

    file_list += file_list_CyBERT + file_list_Word2Vec + file_list_nvjr

    all_temp = []
    for file_path in file_list:
        file_name = os.path.basename(file_path)
        print("File path:", file_path)
        temp = []
        with open(os.path.join(folder_path,file_name), 'r',encoding='utf-8') as fp:
            json_data = json.load(fp)
            all_indices = json_data["attacked_examples"]
            for i in range(len(all_indices)):
                try:
                    if all_indices[i]["ground_truth"] != all_indices[i]["perturbed_pred"]:
                        temp.append(i)
                except:
                    pass                        ###skipped
        all_temp.append(temp)

    common_elements = set(all_temp[0])


    for sublist in all_temp[1:]:
        common_elements.intersection_update(sublist)

    common_elements_list = sorted(list(common_elements))

    for k in common_elements_list:
        single_line = []
        original_text = ""
        for file_path in file_list:
            file_name = os.path.basename(file_path)
            print("File path:", file_path)
            temp = []
            with open(os.path.join(folder_path,file_name), 'r',encoding='utf-8') as fp:
                json_data = json.load(fp)
                all_indices = json_data["attacked_examples"]
                single_line.append(all_indices[k]["perturbed_text"])
                original_text = all_indices[k]["original_text"]

        single_line.insert(0,original_text)

        with open(r"./{}/input.txt".format(model),"a",encoding="utf-8") as tp:

            tp.write(str(single_line) + "\n")                   ###Record the results generated by all methods on the same sample



# File path: ../output_bert/cti-bae-strict-preserve.json
# File path: ../output_bert/cti-deepwordbug-strict-preserve.json
# File path: ../output_bert/cti-morpheus-strict-preserve.json
# File path: ../output_bert/cti-textfooler-strict-preserve.json
# File path: ../output_bert/cti-bae-strict-preserve-CyBERT.json
# File path: ../output_bert/cti-textfooler-strict-preserve-Word2Vec-similar_by_word.json
# File path: ../output_bert/cti-nvjr-strict-preserve-MustInWord2vec-WIR-random-threshold0.2.json
